/* Calculation of the topological derivative for the compliance functional */
include "./sources/inout.idp"
include "./sources/macros.idp"

/* Get mesh and sol names */
string MESH       = getsParam(EXCHFILE,"MeshName");
string DISP       = getsParam(EXCHFILE,"DispName");
string GRADCP     = getsParam(EXCHFILE,"GradName");
int lint          = getiParam(EXCHFILE,"Refint");
int refneu        = getiParam(EXCHFILE,"Neumann");
int refiso        = getiParam(EXCHFILE,"ReferenceBnd");

/* Loading mesh */
mesh Th = readmesh(MESH);

/* Finite element spaces and functions */
fespace Vh(Th,P1);
fespace Vh0(Th,P0);

Vh ux,uy,g,v;
Vh0 reg = region;

/* Load elastic displacement */
loadvec2(DISP,ux[],uy[]);

/* Mesh of the interior part and corresponding FE spaces */
mesh Thi = trunc(Th,(reg(x,y) == lint),label=lint);
fespace Vhi(Thi,P1);
fespace Vh0i(Thi,P0);
Vhi uix,uiy,gi,vhi;
Vh0i Aeueu,trAeu,treu,g0i;

/* Transfer the elastic displacement on the mesh of the shape */
uix = ux;
uiy = uy;

/* Calculation of the topological derivative */
Aeueu = mu*(2.0*dx(uix)*dx(uix) + (dx(uiy)+dy(uix))*(dx(uiy)+dy(uix))
            + 2.0*dy(uiy)*dy(uiy)) + lm*(dx(uix)+dy(uiy))*(dx(uix)+dy(uiy));

trAeu = (2.0*mu + 2.0*lm) * (dx(uix) + dy(uiy));

treu = dx(uix) + dy(uiy);

g0i = pi * (lm+2.0*mu)/(2.0*mu*(lm+mu)) * (4.0*mu*Aeueu + (lm-mu)*trAeu*treu);

/* Convert the topological derivative from a P0 to a P1 function: the value of gi at each node is the weighted average of the values of g0i */
problem averag(gi,vhi) = int2d(Thi)(gi*vhi)
                         - int2d(Thi)(g0i*vhi);

averag;

/* Transfer solution to the total mesh */
g = gi;

/* Solve problem and save solution */
printsol(GRADCP,g[]);
